
use std::fs::File;
use std::io::{self, BufRead};
use std::path::Path;

fn main() {
    // File hosts must exist in current path before this produces output
    if let Ok(lines) = read_lines("./input2") {
        // Consumes the iterator, returns an (Optional) String
	let mut plays: Vec<Play> = Vec::new();
        for line in lines {
            if let Ok(ip) = line {
                let play_str: Vec<&str> = ip.split(' ').collect();
		let play = Play::new(play_str[0],play_str[1]);
		plays.push(play);
            }
        }
	println!("{:?}",plays);
    }
}
#[derive(Debug)]
struct Play {
	in_str: String,
	out_str: String,
	score: usize,
}
impl Play {
    fn new(in_str: &str, out_str: &str) -> Play {
        let mut play = Play{in_str: String::from(in_str), out_str:
        String::from(out_str), score: 0};
        play.score();
        play
    }
    fn score(&self) {
        //play
    }
}

// The output is wrapped in a Result to allow matching on errors
// Returns an Iterator to the Reader of the lines of the file.
fn read_lines<P>(filename: P) -> io::Result<io::Lines<io::BufReader<File>>>
where P: AsRef<Path>, {
    let file = File::open(filename)?;
    Ok(io::BufReader::new(file).lines())
}

